# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2022, The AppImage project
# This file is distributed under the same license as the AppImage package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AppImage master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-04 12:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/packaging-guide/manual.rst:4
msgid "Manual packaging"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:6
msgid ""
"Create an AppDir manually, then turn it into an AppImage. Start out with the "
"example below, then check the examples on bundling certain applications or "
"type of applications as AppImages from the right-hand side **\"Pages\"** "
"menu."
msgstr ""

#: ../../../source/packaging-guide/manual.rst:12
msgid "Contents"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:17
msgid "Creating an AppDir manually"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:19
msgid ""
"In practice, you will probably never do this by hand. So this is mainly to "
"illustrate the concept."
msgstr ""

#: ../../../source/packaging-guide/manual.rst:21
msgid "Create an AppDir structure that looks (as a minimum) like this::"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:23
msgid ""
"MyApp.AppDir/\n"
"MyApp.AppDir/AppRun\n"
"MyApp.AppDir/myapp.desktop\n"
"MyApp.AppDir/myapp.png\n"
"MyApp.AppDir/usr/bin/myapp\n"
"MyApp.AppDir/usr/lib/libfoo.so.0"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:30
msgid ""
"The :code:`AppRun` file can be a script or executable. It sets up required "
"environment variables such as :code:`$PATH` and launches the payload "
"application. You can write your own, but in most cases it is easiest (and "
"most error-proof) to use a precompiled one from this repository."
msgstr ""

#: ../../../source/packaging-guide/manual.rst:32
msgid ""
"Of course you can leave out the library if your app does not need one, or if "
"all libraries your app needs are already contained in every base operating "
"system you are targeting."
msgstr ""

#: ../../../source/packaging-guide/manual.rst:38
msgid "No hard-coded paths"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:40
msgid ""
"Your binary, myapp, must not contain any hardcoded paths that would prevent "
"it from being relocateable. You can check this by running"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:42
msgid "strings MyApp.AppDir/usr/bin/myapp | grep /usr"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:46
msgid ""
"Should this return something, then you need to modify your app "
"programmatically (e.g., by using relative paths, using `binreloc <https://"
"github.com/limbahq/binreloc>`__, or using :code:`QString QCoreApplication::"
"applicationDirPath()`)."
msgstr ""

#: ../../../source/packaging-guide/manual.rst:48
msgid ""
"If you prefer not to change the source code of your app and/or would not "
"like to recompile your app, you can also patch the binary, for example using "
"the command"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:50
msgid "sed -i -e 's#/usr#././#g' MyApp.AppDir/usr/bin/myapp"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:54
msgid ""
"This usually works as long as the application is not doing a :code:`chdir()` "
"which would break this workaround, because then :code:`././` would not be "
"pointing to :code:`$APPDIR/usr` any more. You can run the following command "
"to see whether the application is doing a :code:`chdir()` (99% of GUI "
"applications don't)"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:56
msgid "strace -echdir -f ./AppRun"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:60
msgid "Also see:"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:61
msgid ""
"https://www.gnu.org/software/gnulib/manual/html_node/Supporting-Relocation."
"html"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:64
msgid ""
"It has been a pain for many users of GNU packages for a long time that "
"packages are not relocatable. The relocatable-prog module aims to ease the "
"process of making a GNU program relocatable."
msgstr ""

#: ../../../source/packaging-guide/manual.rst:67
msgid ""
"The same is true for any helper binaries and/or libraries that your app "
"depends on. You check this and patch it with"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:69
msgid ""
"cd MyApp.AppDir/usr/\n"
"find . -type f -exec sed -i -e 's#/usr#././#g' {} \\;\n"
"cd -"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:75
msgid ""
"which replaces all occurrences of :code:`/usr` with :code:`././`, which "
"simply means \"here\"."
msgstr ""

#: ../../../source/packaging-guide/manual.rst:77
msgid "myapp.desktop should contain (as a minimum):"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:79
msgid ""
"[Desktop Entry]\n"
"Name=MyApp\n"
"Exec=myapp\n"
"Icon=myapp\n"
"Type=Application\n"
"Categories=Utility;"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:88
msgid ""
"Be sure to pick one of the `Registered Categories`_, and be sure that your "
"desktop file passes validation by using :code:`desktop-file-validate your."
"desktop`. If you are not deploying an application with a graphical user "
"interface (GUI) but a command line tool (for the terminal), make sure to "
"add :code:`Terminal=true`."
msgstr ""

#: ../../../source/packaging-guide/manual.rst:92
msgid "Creating an AppImage from the AppDir"
msgstr ""

#: ../../../source/packaging-guide/manual.rst:94
msgid ""
"To create an AppImage, run :code:`appimagetool` on the AppDir in order to "
"turn it into an AppImage. You can get it from this repository's `Releases`_ "
"page (it comes as an AppImage itself; yes, we eat our own dogfood)."
msgstr ""
