# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2022, The AppImage project
# This file is distributed under the same license as the AppImage package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AppImage master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-04 12:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/packaging-guide/optional/signatures.rst:2
msgid "Signing AppImages"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:4
msgid ""
"AppImages can be digitally signed by the person that has produced the "
"AppImage. This ensures that the AppImage comes from the person who pretends "
"to be the author, and ensures that the file has not been tampered with."
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:6
msgid ""
"The AppImages specification allows the AppImage file to carry a digital "
"signature built into the AppImages. This means that the signature does not "
"need to be an external file, but can be carried inside the AppImage itself, "
"similar to how signatures work for traditional Linux packages (such as :code:"
"`.deb` or :code:`.rpm` files)."
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:12
msgid "Contents"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:15
msgid "Embedding a signature inside an AppImage"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:17
msgid ""
"While it would be possible to embed signatures manually, the easiest way to "
"produce a digitally signed AppImage is to use the :code:`appimagetool` "
"command line tool. The internally uses :code:`gpg` or :code:`gpg2` if it is "
"installed and configured on the system."
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:19
msgid ""
"Especially, a key for signing must be prepared before AppImages can be "
"signed. If the machine on which the AppImage is being generated does not "
"have a valid signing key yet, a new one can be generated using"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:21
msgid "$ gpg2 --full-gen-key"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:26
msgid ""
"Please refer to the :code:`gpg` or :code:`gpg2` documentation for additional "
"information. You should take additional care to backup your private and "
"public keys in a secure location."
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:28
msgid ""
"Once you're signing keys have been set up, you can sign AppImages at "
"AppImage creation time using"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:30
msgid "$ ./appimagetool-x86_64.AppImage some.AppDir --sign"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:35
msgid ""
"This will sign the AppImage with :code:`gpg[2]` and will put the signature "
"into the AppImage."
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:39
msgid "Reading the signature"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:41
msgid ""
"You can display the digital signature that is embedded in AppImage by "
"running the AppImage with the :code:`--appimage-signature` option like this:"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:43
msgid ""
"$ ./XChat_IRC-x86_64.AppImage --appimage-signature\n"
"\n"
"-----BEGIN PGP SIGNATURE-----\n"
"Version: GnuPG v2\n"
"\n"
"iQEcBAABCAAGBQJX6CN9AAoJENBdKWeGw9/dsvoH/RgEggMiNTwgyA4io2Dyy1j1\n"
"6U3CQST9HVmh9PjeFKZCgFCZbHvpFz9mzhLTPlOAbczBnSmmbgqROINaLW+1tqEx\n"
"stOy67D3Z1cySzRTOhSkjiUOP5unmZL6QTNPxRHmuRkyihv7YfAlkrogXQlYbZ1h\n"
"Ilt6jU1b97GSPox/EE3Z002iZGJYQ3FfjAlp9o947goY5koA5KYqyzTCvEjhTk/L\n"
"wz1mFcjEkzHt9CaHZfrZCE3QVSBTq071wzsHCFHaJswPhA6iI0psCnFY56PPResi\n"
"uljTQr3nOBaqNyUgU3y4Tbd+36cwggSaTpGAzlhgNoalIwB1ltFSdPeRPe4Q3Qc=\n"
"=MR0w\n"
"-----END PGP SIGNATURE-----"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:62
msgid ""
"Please note that while this displays the signature, it does not validate the "
"signature. In other words, this does not tell you whether the signature is "
"valid or not, or whether the file has been tampered with or not. To validate "
"the signature, an external tool (which is not part of AppImage that needs to "
"be validated) needs to be used."
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:66
msgid "Validating the signature"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:68
msgid ""
"To validate a signature of an an AppImage and to determine whether an "
"AppImage has been compromised, an external tool needs to be used. There is a "
"very simple tool called :code:`validate` that can do this."
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:70
msgid ""
"$ chmod a+x ./validate\n"
"$ ./validate ./XChat_IRC-x86_64.AppImage\n"
"\n"
"gpg: Signature made Sun 25 Sep 2016 10:41:24 PM CEST using RSA key ID "
"86C3DFDD\n"
"gpg: Good signature from \"Testkey\" [ultimate]"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:79
msgid ""
"Signature validation can also be integrated into higher level software such "
"as the optional :code:`appimaged` daemon and/or :code:`AppImageUpdate`. For "
"example the :code:`appimaged` daemon may decide to run applications without "
"a valid signature in a confined sandbox in the future, if the system is set "
"up accordingly."
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:81
msgid "Todo"
msgstr ""

#: ../../../source/packaging-guide/optional/signatures.rst:83
msgid ""
"It may be desirable to integrate validate functionality into :code:"
"`libappimage` and into tools like :code:`appimagetool`, the optional :code:"
"`appimaged` demon and/or :code:`AppImageUpdate`."
msgstr ""
