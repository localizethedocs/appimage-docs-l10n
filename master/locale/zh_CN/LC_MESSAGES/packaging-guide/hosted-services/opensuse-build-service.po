# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2022, The AppImage project
# This file is distributed under the same license as the AppImage package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AppImage master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-04 12:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:4
msgid "Using the Open Build Service"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:6
msgid ""
"`Open Build Service <https://openbuildservice.org/>`__ is a generic system "
"to build and distribute packages from sources in an automatic, consistent "
"and reproducible way. It allows you to build software for various package "
"formats and distributions. Now it can also build AppImages that run on a "
"variety of distributions."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:8
msgid ""
"The `openSUSE Build Service`_ is the public instance of the Open Build "
"Service (OBS). This infrastructure can can be used for free by open source "
"projects. However, you are not limited to it - you can set up your own Open "
"Build Service instance if you like."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:16
msgid "Contents"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:19
msgid "Differences to other methods of building AppImages"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:21
msgid ""
"There are different ways to build AppImages. Why is using Open Build Service "
"interesting?"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:23
msgid ""
"If you are already using Open Build Service, then *also* generating an "
"AppImage should be straightforward"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:24
msgid ""
"You can use the public `openSUSE Build Service`_ instance and use the "
"existing infrastructure to build and distribute your AppImage (for open "
"source projects only)"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:25
msgid ""
"You can build AppImages in \"automatic, consistent and reproducible way\". "
"This means that unlike when you build your AppImages on, e.g., Travis CI, "
"where you can pull in arbitrarily changing build dependencies and AppImage "
"ingredients from the net, your builds on Open Build Service can only use "
"build dependencies and AppImage ingredients that have their source code in "
"distribution repositories or on Open Build Service. While this may be a "
"limitation in some cases (e.g., for agile/continuous builds), it means that "
"the build result is much more reproducible"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:26
msgid ""
"OBS helps you to keep the ingredients of your AppImage up-to-date all the "
"time using proven distribution methodologies and tool, relieving the person "
"or group providing AppImages from manual work as discussed `here <https://"
"www.youtube.com/watch?v=BrWB2OZ9h2Y>`_"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:27
msgid ""
"OBS automatically builds a new AppImage for you if one if its ingredients is "
"updated on OBS"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:28
msgid "OBS automatically signs AppImages using the user's key on OBS"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:29
msgid ""
"OBS automatically embeds update information into AppImages to enable binary "
"delta updates using AppImageUpdate. This means that if in a 100 MB AppImage "
"only 1 MB changed between versions, then the user has to download only 1 MB "
"rather than 100 MB"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:32
msgid "The osc command line tool"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:34
msgid ""
"While OBS can be used entirely through the web interface, it can be "
"beneficial to use the `osc` command line tool. It is available as an "
"AppImage from `OpenSUSE's download page <https://download.opensuse.org/"
"repositories/openSUSE:/Tools/AppImage/>`__. Since this page is mainly geared "
"toward beginners, it mainly describes the web interface. However, using the "
"command line tool may offer a quicker route for more experienced OBS users."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:38
msgid "Setting up an account and a project"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:40
msgid ""
"This page describes how to use the public `openSUSE Build Service`_ "
"instance. If you use your own instance, things will probably be similar but "
"may not be identical."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:42
msgid ""
"To set up an account, go to https://build.opensuse.org/ and click on \"Sign "
"Up\" in the upper-right corner"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:44
msgid ""
"Once you have an account, log in using it and click on \"Home Project\" in "
"the upper-right corner. Every user has a home project. Think if it as a "
"collection of source code packages that you build AppImages (and possibly "
"other types of packages) from. Later on, you can add additional projects, "
"and invite collaborators to them"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:48
msgid "Hello world"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:50
msgid "On the https://build.opensuse.org/ homepage, click on \"New Image\"."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:55
msgid "\"New Image\" icon"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:58
msgid "Then select AppImage, and click \"Create Appliance\"."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:63
msgid ""
"Radio button: \"Select template\" (AppImage), input field: \"Name your "
"appliance\", submit button: \"Create Appliance\""
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:66
msgid ""
"Done! An AppImage of Leafpad, a simple text editor, will be built. You can "
"use this template as a starting point to customize for other applications."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:68
msgid "The following sections describe how to do the same manually."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:72
msgid "Setting up an AppImage target for the project"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:74
msgid ""
"You need to tell OBS that for all source code packages in your home project "
"you want to generate AppImages. To enable a target for AppImage, you can "
"either use the command line tool :code:`osc meta prj -e ...` or use the OBS "
"web interface:"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:76
msgid "Go to your home project"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:77
msgid "Click on \"Advanced\""
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:78
msgid "Click on \"Meta\""
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:79
msgid "Copy and paste the :code:`<repository>` tags from the following:"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:81
msgid ""
"<project name=\"home:probono\">\n"
"  <title>probono</title>\n"
"  <description/>\n"
"  <person userid=\"probono\" role=\"maintainer\"/>\n"
"  <publish>\n"
"    <enable/>\n"
"    </publish>\n"
"  <repository name=\"AppImage.arm\">\n"
"    <path project=\"home:probono\" repository=\"openSUSE_13.1\"/>\n"
"    <path project=\"OBS:AppImage\" repository=\"AppImage.arm\"/>\n"
"    <arch>armv7l</arch>\n"
"    <arch>aarch64</arch>\n"
"  </repository>\n"
"  <repository name=\"AppImage\">\n"
"    <path project=\"home:probono\" repository=\"openSUSE_13.1\"/>\n"
"    <path project=\"OBS:AppImage\" repository=\"AppImage\"/>\n"
"    <arch>x86_64</arch>\n"
"    <arch>i586</arch>\n"
"  </repository>\n"
"</project>"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:107
msgid ""
"The :code:`AppImage.arm` repository is used for the ARM architectures for "
"now. This will possibly change in the future."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:110
msgid ""
"Be sure to just insert the :code:`<repository>` tags into your existing "
"file. For AppImage, we need to select one of the build targets that is built "
"in your obs project. In the example above, please make sure to replace :code:"
"`home:probono` with the actual name of the obs project where :code:`appimage."
"yml` should look for its resources - this can be the current project, and "
"even RPMs created by the same package work as resources for AppImage."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:112
msgid ""
"Also check if openSUSE_13.1 is still alive or use something slightly newer "
"instead."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:116
msgid "Use native AppImage build support"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:118
msgid ""
"In order to build an AppImage you need to provide a file called :code:"
"`appimage.yml`. OBS needs to get all the required resources before building. "
"This is needed in order to be able to track changes and to find out whether "
"a rebuild is needed, and to provide the resources in a secured and "
"reproducible environment without network access."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:120
msgid ""
"The :code:`build:` section can be used to define resources which are "
"required to build. This can be binary packages (currently only rpm) or URLs "
"to any other source control management systems or file. The binary packages "
"listed in the build section get installed to the build  environment, but not "
"extracted into the AppDir."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:122
msgid ""
"The packages listed in the ingredients section do not get installed into the "
"build environment but get extracted into the AppDir."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:124
msgid ""
"URLs for the supported source control management systems (git, svn, cvs, hg, "
"bzr) get handled via the appimage source service, which is a part of `obs-"
"service-tar_scm <https://github.com/openSUSE/obs-service-tar_scm>`__. It is "
"downloading the sources and provides them to the build system as directory "
"structure."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:126
msgid "Todo"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:128
msgid ""
"**not yet implemented** URLs to files get handled via the download_files "
"source service. It is handy to provide single files to the build."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:132
msgid ""
"Scripts can be executed in the form of the script hooks of the :code:"
"`appimage.yml` file."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:136
msgid ""
":code:`Recipe` files are **not** supported, anything they can do can be done "
"inside the :code:`script` sections of :code:`appimage.yml`."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:138
msgid "It is optional to either"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:141
msgid ""
"create the AppImage root via packages by using the ingredients section. This "
"is useful especially for larger software, because it avoid the need of a "
"recompilation and just repackages the content of binary packages."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:143
msgid ""
"create the AppImage root only from source using the scripts. This is useful "
"when you want to avoid to build a binary package first."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:145
msgid "Both approaches can also get combined if wanted."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:149
msgid "`appimage.yml` file"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:151
msgid ""
"Please note that it uses the following environment variables which are "
"provided by the build system:"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:153
msgid ""
":code:`BUILD_SOURCE_DIR`: The absolute directory name where all source files "
"or directories are hosted"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:154
msgid ""
":code:`BUILD_APPDIR`: The directory which will get packaged as AppImage file"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:158
msgid "Most simple example"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:160
msgid ""
"This :code:`APPIMAGE_NAME` application will get package into an :code:`."
"AppImage` file just by installing the :code:`RPM_PACKAGE_NAME`. The binary "
"can get patched automatically when using the :code:`binpatch: true` option"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:162
msgid ""
"|question| From which repositories can rpms be installed? Only my own or "
"those of all OBS users?"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:181
msgid "question"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:164
msgid "|question| Can additional repositories be added?"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:168
msgid ""
"app: APPIMAGE_NAME\n"
"binpatch: true\n"
"\n"
"ingredients:\n"
"  packages:\n"
"    - RPM_PACKAGE_NAME\n"
"\n"
"script:\n"
"  - cd $BUILD_APPDIR/\n"
"  - cp $BUILD_APPDIR/usr/share/applications/NAME.desktop $BUILD_APPDIR\n"
"  - cp $BUILD_APPDIR/usr/share/pixmaps/NAME.png $BUILD_APPDIR"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:185
msgid "Simple example building from source"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:189
msgid ""
"app: QtQuickApp\n"
"\n"
"build:\n"
"  packages:\n"
"    - linuxdeployqt\n"
"    - pkgconfig(Qt5Quick)\n"
"  git:\n"
"    - https://github.com/probonopd/QtQuickApp.git\n"
"\n"
"script:\n"
"  - cd $BUILD_SOURCE_DIR/QtQuickApp*\n"
"  - qmake-qt5 PREFIX=/usr\n"
"  - make INSTALL_ROOT=$BUILD_APPDIR install\n"
"  - unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH\n"
"  - linuxdeployqt $BUILD_APPDIR/usr/share/applications/*.desktop -"
"qmldir=$BUILD_SOURCE_DIR/ -bundle-non-qt-libs -verbose=2\n"
"  - linuxdeployqt $BUILD_APPDIR/usr/share/applications/*.desktop -"
"qmldir=$BUILD_SOURCE_DIR/ -bundle-non-qt-libs -verbose=2"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:207
msgid "We have to also upload a file called :code:`_service` containing"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:209
msgid ""
"<services>\n"
"  <service name=\"appimage\"/>\n"
"</services>"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:216
msgid ""
"When trying this on a private OBS instance, please make sure to have :code:"
"`obs-service-appimage` installed. This can be done e.g. on a Leap 42.1 "
"machine with::"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:218
msgid ""
"zypper addrepo http://download.opensuse.org/repositories/openSUSE:Tools/"
"openSUSE_42.1/openSUSE:Tools.repo\n"
"zypper ref\n"
"zypper in obs-service-appimage"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:224
msgid "Options inside of the build section"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:226
msgid "you can add multiple items in the sections."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:230
msgid ""
"build:\n"
"  packages:\n"
"     - [SINGLE BINARY PACKAGE NAME]\n"
"\n"
"  git:   # can be also svn, cvs, hg, bzr\n"
"     - [URL TO SCM REPOSITORY]\n"
"\n"
"  files:\n"
"     - [URL TO A RESOURCE]"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:242
msgid "Inspecting the results"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:244
msgid ""
"Be sure to download the resulting AppImage from OBS and test it on your "
"target system(s). It is recommended to test at least on the oldest still-"
"supported Ubuntu LTS, the recent Ubuntu, the oldest still-supported openSUSE "
"Leap, possibly the latest openSUSE Tumbleweed, CentOS 7, and the latest "
"Fedora release (although you may to choose to support different target "
"systems)."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:248
msgid "Working examples"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:250
msgid "Feel free to put yours here, too."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:252
msgid ""
"https://build.opensuse.org/package/show/home:probono/QtQuickApp?"
"repository=AppImage"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:253
msgid ""
"https://build.opensuse.org/package/show/home:probono/DSRemote?"
"repository=AppImage"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:254
msgid ""
"https://build.opensuse.org/package/show/home:probono/Qactus?"
"repository=AppImage"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:255
msgid ""
"https://build.opensuse.org/package/show/home:probono/leafpad?"
"repository=AppImage"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:256
msgid ""
"https://github.com/olav-st/screencloud/blob/master/deploy/linux/appimage.yml"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:257
msgid ""
"https://build.opensuse.org/package/view_file/home:pbek:QOwnNotes/desktop/"
"appimage.yml?expand=1"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:258
msgid ""
"https://build.opensuse.org/package/view_file/home:pbartfai/LDView/_service:"
"extract_file:appimage.yml?expand=1"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:259
msgid ""
"https://build.opensuse.org/package/view_file/home:lachs0r:taisei/taisei/"
"appimage.yml?expand=1"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:260
msgid "https://github.com/orschiro/dslli/blob/master/show_state.yml"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:261
msgid ""
"https://build.opensuse.org/package/view_file/home:cecilios/lenmus-appimage/"
"appimage.yml?expand=1"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:265
msgid "Continuous builds with GitHub and OBS"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:267
msgid ""
"If your source code lives on GitHub, then you can set up a mechanism that "
"makes GitHub inform OBS about any changes to the source code, and trigger a "
"rebuild automatically."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:269
msgid ""
"A token needs to be generated, this can be done using the :code:`osc` OBS "
"command line client:"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:271
msgid ""
"sudo apt update && sudo apt install osc # or your package manager's "
"equivalent\n"
"osc token --create"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:277
msgid "If you have already generated a token in the past, you can show it with"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:279
msgid "osc token"
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:284
msgid ""
"On the GitHub project page, click on \"Settings\", then click on "
"\"Integrations & services\", then click on \"Add service\", enter \"Obs\" "
"and select it. For example, for the `QtQuickApp`_ project go to :code:"
"`https://github.com/probonopd/QtQuickApp/settings/installations`, and "
"corresponding to https://build.opensuse.org/package/show/home:probono/"
"QtQuickApp entered :code:`home:probono` for the project and :code:"
"`QtQuickApp` for in the Package field, as well as the token generated above "
"in the \"Token\" field. Please note that you need to supply your own "
"username and project name instead of the one in the example above."
msgstr ""

#: ../../../source/packaging-guide/hosted-services/opensuse-build-service.rst:286
msgid ""
"Now, whenever you do a :code:`git push` to my `QtQuickApp`_ project, OBS "
"will build it for me."
msgstr ""
