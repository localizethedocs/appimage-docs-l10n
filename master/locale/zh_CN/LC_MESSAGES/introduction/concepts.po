# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2022, The AppImage project
# This file is distributed under the same license as the AppImage package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AppImage master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-04 12:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/introduction/concepts.rst:2
msgid "Concepts"
msgstr ""

#: ../../../source/introduction/concepts.rst:4
msgid ""
"The AppImage development follows a few easy-to-understand core principles "
"and concepts that keep it simple to use for developers and users. In this "
"section, the most prominent concepts are explained."
msgstr ""

#: ../../../source/introduction/concepts.rst:10
msgid "Contents"
msgstr ""

#: ../../../source/introduction/concepts.rst:15
msgid "One app = one file"
msgstr ""

#: ../../../source/introduction/concepts.rst:17
msgid ""
"AppImages are simple to understand. Every AppImage is a regular file, and "
"every AppImage contains exactly one app with all its dependencies. Once the "
"AppImage is :ref:`made executable <ref-download-make-executable-run>`, a "
"user can just run it, either by double clicking it in their desktop "
"environment's file manager, by running it from the console etc."
msgstr ""

#: ../../../source/introduction/concepts.rst:22
msgid ""
"On a regular basis, `users ask <https://github.com/AppImage/AppImageKit/"
"issues/848>`__ about implementing support for some sort of \"reusable/shared "
"frameworks\". These frameworks are supposed to contain bundles of libraries "
"which are needed by more than one AppImage, and hence could save some disk "
"space. For management, they suggest complex automagic systems that will "
"automatically fetch the \"frameworks\" from the Internet if they're not "
"available, or some complicated, mostly manual methods how to users could "
"bundle frameworks together with the AppImages on portable disks like USB "
"sticks."
msgstr ""

#: ../../../source/introduction/concepts.rst:24
msgid ""
"These may be good ideas for some people, and even if they worked perfectly "
"fine, they'd break with our most important concept: :ref:`one app = one file "
"<one-app-one-file-principle>`. AppImages are so simple to understand "
"*because* every application is a single file. There's no complexity in this "
"approach, even grandma could understand it. And after all, disk space is "
"cheap nowadays, right?"
msgstr ""

#: ../../../source/introduction/concepts.rst:26
msgid ""
"If you prefer this approach or absolutely need it, please check out "
"alternative approaches. AppImage will never implement such a feature."
msgstr ""

#: ../../../source/introduction/concepts.rst:32
msgid "Do not depend on system-provided resources"
msgstr ""

#: ../../../source/introduction/concepts.rst:34
msgid ""
"The author of an AppImage needs to decide for which target systems (Linux "
"distributions) they want to offer the AppImage.  Then, the author needs to "
"bundle any dependencies that cannot reasonably be assumed to come with every "
"target system (Linux distributions) in its default installation in a recent "
"enough version."
msgstr ""

#: ../../../source/introduction/concepts.rst:36
msgid ""
"To be able to run on any Linux distribution, an AppImage should bundle all "
"the resources it needs at runtime that cannot be reasonably expected to be "
"\"there\" in the default installation of all still-supported target systems "
"(Linux distributions). The most common resources are the actual binaries, "
"shared library dependencies, icons and other graphics and of course one or "
"more desktop files for desktop integration."
msgstr ""

#: ../../../source/introduction/concepts.rst:38
msgid ""
"This doesn't mean an AppImage must not use resources provided by the system, "
"like for example basic libraries that can be assumed to be part of every "
"target system (e.g., the C standard library or graphics libraries), user "
"interface themes or the like. See the `excludelist <https://github.com/"
"AppImage/pkg2appimage/blob/master/excludelist>`__ for a list of the "
"libraries we consider to currently be part of each still-supported target "
"system (distribution)."
msgstr ""

#: ../../../source/introduction/concepts.rst:44
msgid "Build on old systems, run on newer systems"
msgstr ""

#: ../../../source/introduction/concepts.rst:46
msgid ""
"It is considered best practice to develop and compile the application on the "
"oldest still-supported Linux distribution that we can assume users to still "
"use. For example, the oldest still-supported LTS release of Ubuntu is a good "
"choice to develop applications against and build applications on."
msgstr ""

#: ../../../source/introduction/concepts.rst:48
msgid ""
"Applications should be built on the oldest possible system, allowing them to "
"run on newer system. This allows the exclusion of certain \"base "
"libraries\", which can be expected to be present on all major desktop Linux "
"distributions, reducing the overhead of :ref:`one app = one file <one-app-"
"one-file-principle>`. These dependencies are mostly shared libraries and "
"involve low level libraries like :code:`libc.so.6` (the GNU C library, the C "
"language standard library the majority of all Linux distributions use), but "
"also common libraries like zlib_ or the GLib_ libraries are normally present."
msgstr ""

#: ../../../source/introduction/concepts.rst:50
msgid ""
"It may seem contradictory to :ref:`the previous section <no-external-"
"dependencies>` to rely on distribution provided resources. This is a trade-"
"off between trying to reduce redundancies while at the same time being as "
"self-contained as possible."
msgstr ""

#: ../../../source/introduction/concepts.rst:52
msgid ""
"In some cases, including the libraries might even break the AppImage on the "
"target system. Those libraries involve, among others, hardware dependent "
"libraries such as graphics card drivers provided libraries (e.g., :code:"
"`libGL.so.1`, (`source <https://github.com/AppImage/pkg2appimage/"
"blob/14c255b528dd88ef3e00ae0446ac6d84a20ac798/excludelist\\#L38-L41>`__)), "
"or libraries that are build and linked differently on different "
"distributions (e.g., :code:`libharfbuzz.so.0` and :code:`libfreetype.so.6` "
"(`source <https://github.com/AppImage/pkg2appimage/"
"blob/14c255b528dd88ef3e00ae0446ac6d84a20ac798/excludelist\\#L98-L102>`__)."
msgstr ""

#: ../../../source/introduction/concepts.rst:54
msgid ""
"The list of libraries that can resp. have to be excluded, the so-called "
"`excludelist <https://github.com/AppImage/pkg2appimage/blob/master/"
"excludelist>`__, is carefully curated by the AppImage team, and is regularly "
"updated."
msgstr ""

#: ../../../source/introduction/concepts.rst:63
msgid "AppImage specification"
msgstr ""

#: ../../../source/introduction/concepts.rst:65
msgid ""
"The term *AppImage* does not refer to some software project, but is actually "
"a standard specified in the :ref:`AppImage specification <ref-appimage-"
"specification>`. Its reference implementation is called :ref:`ref-"
"appimagekit`."
msgstr ""

#: ../../../source/introduction/concepts.rst:67
msgid ""
"Being designed as a standard with a reference implementation allows users to "
"implement their own tools to build AppImages, and helps maintaining "
"compatibility between different tools and components."
msgstr ""

#: ../../../source/introduction/concepts.rst:71
msgid "AppDirs"
msgstr ""

#: ../../../source/introduction/concepts.rst:73
msgid ""
"The term *AppDir* refers to an application directory. These directories are "
"the \"source\" of AppImages. When :ref:`ref-appimagetool` builds an "
"AppImage, it creates a read-only image of such a directory, prepends the :"
"ref:`ref-runtime`, and marks the file executable."
msgstr ""

#: ../../../source/introduction/concepts.rst:75
msgid "The AppDir format is described in the :ref:`ref-appdir-specification`."
msgstr ""
