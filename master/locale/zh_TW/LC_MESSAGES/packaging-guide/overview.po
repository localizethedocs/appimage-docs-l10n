# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2022, The AppImage project
# This file is distributed under the same license as the AppImage package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AppImage master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-04 12:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/packaging-guide/overview.rst:2
msgid "Overview"
msgstr ""

#: ../../../source/packaging-guide/overview.rst:4
msgid ""
"There are different ways to create AppImages. The following section gives "
"you an overview of which ways are available, their advantages and "
"disadvantages, and where to find more information."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:10
msgid "Contents"
msgstr ""

#: ../../../source/packaging-guide/overview.rst:15
msgid "Packaging from source"
msgstr ""

#: ../../../source/packaging-guide/overview.rst:17
msgid ""
"The recommended approach is to package software from source. Ideally, "
"upstream application authors take over maintenance of AppImages, and provide "
"them on their release pages."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:19
msgid ""
"To learn more about how packaging from source works, please refer to :ref:"
"`ref-packaging-from-source`."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:21
msgid ""
"The process of packaging from source can and should be automated. CI systems "
"like Travis CI can help with that."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:27
msgid "Automated continuous builds on Travis CI"
msgstr ""

#: ../../../source/packaging-guide/overview.rst:29
msgid ""
"This option might be the easiest if you already have continuous builds on "
"Travis CI in place. In this case, you can write a small scriptfile and in "
"many cases are done with the AppImage generation."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:31
msgid ""
"More information on using Travis CI for making AppImages can be found in :"
"ref:`ref-travis-ci`."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:34
msgid ""
"There are a lot of examples on GitHub that can be found using the `GitHub "
"search <https://github.com/search?"
"utf8=%E2%9C%93&q=%22Package+the+binaries+built+on+Travis-"
"CI+as+an+AppImage%22&type=Code&ref=searchresults>`__."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:40
msgid "Using electron-builder"
msgstr ""

#: ../../../source/packaging-guide/overview.rst:42
msgid ""
"For `Electron`_ based applications, a tool called electron-builder_ can be "
"used to create AppImages."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:44
msgid ""
"With electron-builder, making AppImages is as simple as defining "
"``AppImage`` as a target for Linux (default in the latest version of "
"electron-builder). This should yield usable results for most applications."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:47
msgid ""
"More information can be found in the `documentation on AppImage <https://www."
"electron.build/configuration/appimage.html>`__ and `the documentation on "
"distributable formats <https://www.electron.build/index.html#pack-only-in-a-"
"distributable-format>`__ in the `electron-builder manual <https://www."
"electron.build>`__."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:49
msgid ""
"There are a lot of examples on GitHub that can be found using the `GitHub "
"search <https://github.com/search?utf8=%E2%9C%93&q=electron-"
"builder+linux+target+appimage&type=Code&ref=searchresults>`__."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:58
msgid "Converting existing binary packages"
msgstr ""

#: ../../../source/packaging-guide/overview.rst:60
msgid ""
"This option might be the easiest if you already have up-to-date packages in "
"place, ideally a PPA for the oldest still-supported Ubuntu LTS release "
"(xenial as of 2019, see https://en.wikipedia.org/wiki/Ubuntu#Releases for up "
"to date information) or earlier or a debian repository for oldstable. In "
"this case, you can write a small :code:`.yml` recipe and in many cases are "
"done with the package to AppImage conversion. See :ref:`ref-convert-existing-"
"binary-packages` for more information."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:66
msgid "Using the Open Build Service"
msgstr ""

#: ../../../source/packaging-guide/overview.rst:68
msgid ""
"This option is recommended for open source projects because it allows you to "
"leverage the existing Open Build Service infrastructure, security and "
"license compliance processes."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:70
msgid ""
"More information on using OBS for making AppImages can be found in :ref:`ref-"
"obs`."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:76
msgid "Using appimage-builder"
msgstr ""

#: ../../../source/packaging-guide/overview.rst:78
msgid ""
"appimage-builder is a novel tool for creating AppImages. It uses the system "
"package manager to resolve the application dependencies and creates a "
"complete bundle. It can be used to pack almost any kinds of applications "
"including those made using: C/C++, Python, and Java."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:82
msgid ""
"This tool removes the limitations of requiring an *old system* to compile "
"the binaries. It can be used to pack an application from sources or to turn "
"an existing Debian package into an AppImage."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:85
msgid ""
"For more information about appimage-builder please visit: https://appimage-"
"builder.readthedocs.io"
msgstr ""

#: ../../../source/packaging-guide/overview.rst:91
msgid "Manually creating an AppDir"
msgstr ""

#: ../../../source/packaging-guide/overview.rst:93
msgid ""
"Create an AppDir manually, then turn it into an AppImage. Please note that "
"this method should only be your last resort, as the other methods are much "
"more convenient in most cases. Manually creating an AppDir is explained "
"mainly to illustrate how things work under the hood."
msgstr ""

#: ../../../source/packaging-guide/overview.rst:95
msgid "See :ref:`ref-manual` for more information."
msgstr ""
