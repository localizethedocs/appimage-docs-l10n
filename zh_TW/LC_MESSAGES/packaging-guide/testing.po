# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2022, The AppImage project
# This file is distributed under the same license as the AppImage package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AppImage master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-04 12:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/packaging-guide/testing.rst:4
msgid "Testing your AppImage"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:6
msgid ""
"Testing your AppImage is a very important step in producing an AppImage. "
"Since AppImage files are supposed to run on a variety of Linux "
"distributions, it is important to test your AppImage on a wide variety of "
"distributions."
msgstr ""

#: ../../../source/packaging-guide/testing.rst:10
msgid "Test your AppImage on all base operating systems you are targeting!"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:11
msgid ""
"This is an important step which you should not skip. Subtle differences in "
"distributions make this a must. While it is possible in most cases to create "
"AppImages that run on various distributions, this does not come "
"automatically, but requires careful hand-tuning."
msgstr ""

#: ../../../source/packaging-guide/testing.rst:13
msgid ""
"To ensure that the AppImage runs on the intended base systems, it should be "
"thoroughly tested on each of them. The following testing procedure is both "
"efficient and effective: Get the previous version of Ubuntu, Fedora, and "
"openSUSE Live CDs and test your AppImage there. Using the three largest "
"distributions increases the chances that your AppImage will run on other "
"distributions as well. Using the previous (current minus one) version "
"ensures that your end users who might not have upgraded to the latest "
"version yet can still run your AppImage."
msgstr ""

#: ../../../source/packaging-guide/testing.rst:15
msgid ""
"Using Live CDs has the advantage that unlike installed systems, you always "
"have a system that is in a factory-fresh condition that can be easily "
"reproduced. Most developers just test their software on their main working "
"systems, which tend to be heavily customized through the installation of "
"additional packages. By testing on Live CDs, you can be sure that end users "
"will get the best experience possible."
msgstr ""

#: ../../../source/packaging-guide/testing.rst:21
msgid "Contents"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:24
msgid "Using testappimage"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:26
msgid ""
"You can use ISOs of Live CDs, loop-mount them, chroot into them, and run the "
"AppImage there. This way, you need approximately 700 MB per supported base "
"system (distribution) and can easily upgrade to newer versions by just "
"exchanging one ISO file. The following script automates this for Ubuntu-like "
"(Casper-based) and Fedora-like (Dract-based) Live ISOs:"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:28
msgid ""
"$ wget https://raw.githubusercontent.com/AppImage/AppImageKit/master/"
"testappimage\n"
"$ sudo bash testappimage /path/to/elementary-0.2-20110926.iso "
"AppImageAssistant.AppImage"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:35
msgid "Using the Docker-based appimage-testsuite"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:37
msgid ""
"In addition to Live CD ISOs, it is possible to use Docker containers to test "
"an AppImage package on a large variety of Linux distributions. This approach "
"works for virtually any Linux distribution for which a base Docker container "
"is available. For each of the supported distributions, there is a "
"corresponding DockerFile that allows to build a container with a minimal set "
"of dependencies needed to run an AppImage package."
msgstr ""

#: ../../../source/packaging-guide/testing.rst:39
msgid ""
"Currently, only type2 AppImages that provide the ``--appimage-extract`` "
"option are supported."
msgstr ""

#: ../../../source/packaging-guide/testing.rst:41
msgid ""
"For example, to test an AppImage package on Ubuntu 18.04, the steps to be "
"followed are:"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:43
msgid ""
"$ git clone https://github.com/aferrero2707/appimage-testsuite.git\n"
"$ cd appimage-testsuite\n"
"$ ./run.sh PATH_TO_APPIMAGE/package.AppImage ubuntu-18.04\n"
"# /aitest/aitest.sh"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:50
msgid ""
"The ``run.sh`` script will build the corresponding Docker container, "
"determine the IP address of the host system, and run the container with "
"convenient parameters. The host ``HOME`` folder is mapped to the ``/shared`` "
"folder in the running container, and the X server is forwarded to the host "
"system so that graphical applications can be correctly executed."
msgstr ""

#: ../../../source/packaging-guide/testing.rst:52
msgid "The following Linux distributions are supported out-of-the-box:"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:54
msgid "Ubuntu 14.04, 16.04 and 18.04"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:55
msgid "CentOS 6 and 7"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:56
msgid "Fedora 26 and 27"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:57
msgid "Debian stable and testing"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:58
msgid "Manjaro (Arch Linux derivative)"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:59
msgid "Sabayon (Gentoo Linux derivative)"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:61
msgid "Other distributions can be added by writing an appropriate Dockerfile."
msgstr ""

#: ../../../source/packaging-guide/testing.rst:63
msgid ""
"Users might need to modify the ``run.sh`` script and change the line used to "
"guess the host IP address:"
msgstr ""

#: ../../../source/packaging-guide/testing.rst:65
msgid "IP=$(ifconfig en0 | grep inet | awk '$1==\"inet\" {print $2}')"
msgstr ""
